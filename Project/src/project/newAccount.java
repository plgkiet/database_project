/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project;

import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class newAccount extends javax.swing.JFrame implements ActionListener {

    private String username;

    /**
     * Creates new form newAccount
     */
    public newAccount(String username) {
        initComponents();
        connect();
        this.username = username;
        branchIDComboBox.addActionListener(this);
    }
    
       public void actionPerformed(ActionEvent e) {
        // Check if the event is from branchIDComboBox
        if (e.getSource() == branchIDComboBox) {
            // Get the selected branchID
            String selectedBranchID = branchIDComboBox.getSelectedItem().toString();

            // Query the database to get the corresponding branchCity
            String branchCity = getBranchCity(selectedBranchID);

            // Set the branchCityLabel text
            branchCityLabel.setText(branchCity);
        }
    }

    Connection con; // Declare the connection variable.
    PreparedStatement st; // Declare the PreparedStatement variable.
    ResultSet rs; // Declare the ResultSet variable.
    // To perform JDBC connection define a method with name connect()

    public void connect() {
        try {
            // loading mysql driver class
            Class.forName("com.mysql.cj.jdbc.Driver");
            // creating connection with database
            con
                    = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", "root", "301103");

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(newAccount.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(newAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        depositField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        createBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        accountTypeComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        overdraftField = new javax.swing.JTextField();
        branchIDComboBox = new javax.swing.JComboBox<>();
        branchCityLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("CREATE YOUR ACCOUNT");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel2.setText("YOUR DEPOSIT:");

        depositField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositFieldActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("BRANCH");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel4.setText("BRANCH CITY:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setText("BRANCH ID:");

        createBtn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        createBtn.setText("CREATE");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        exitBtn.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        exitBtn.setText("EXIT");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setText("TYPE OF ACCOUNTS:");

        accountTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "Savings Account", "Current Account" }));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel7.setText("OVERDRAFTS (*for Current Account only):");

        branchIDComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "Ha101", "Ha102", "HCM101", "HCM102", "HCM103", "TDM101" }));
        branchIDComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchIDComboBoxActionPerformed(evt);
            }
        });

        branchCityLabel.setText(".");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(branchIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(createBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(accountTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(exitBtn)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(branchCityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(depositField, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(overdraftField, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depositField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(branchIDComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(branchCityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accountTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overdraftField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createBtn)
                    .addComponent(exitBtn))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        this.dispose();
        new customerInfo(username).setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_exitBtnActionPerformed
// Implement actionPerformed method to handle branchID selection change

    private String getBranchCity(String branchID) {
        try {
            // Use a PreparedStatement to perform the select
            String query = "SELECT branch_city FROM project.branch WHERE branch_id = ?";
            PreparedStatement st = con.prepareStatement(query);
            st.setString(1, branchID);

            // Execute the query
            ResultSet rs = st.executeQuery();

            // Check if the result set has a row
            if (rs.next()) {
                // Get the branchCity from the result set
                return rs.getString("branch_city");
            }
        } catch (SQLException ex) {
            Logger.getLogger(newAccount.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Return an empty string if branchCity is not found
        return "";
    }

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        double initialDeposit = Double.parseDouble(depositField.getText());
        String branchID = branchIDComboBox.getSelectedItem().toString();
        String accountType = accountTypeComboBox.getSelectedItem().toString();
        String branchCity = branchCityLabel.getText();
        double overdrafts = 0.0;

        // Validate inputs
        if (initialDeposit <= 0) {
            JOptionPane.showMessageDialog(this, "Invalid deposit amount", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (branchID.equals("SELECT") || accountType.equals("SELECT")) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Additional validation based on account type
        if (accountType.equals("Savings Account") && initialDeposit < 100) {
            JOptionPane.showMessageDialog(this, "Minimum deposit amount not met for Savings Account", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (accountType.equals("Current Account")) {
            // If the selected account type is Current Account, validate overdrafts
            overdrafts = Double.parseDouble(overdraftField.getText());
            if (overdrafts < 300 || initialDeposit < 1000) {
                JOptionPane.showMessageDialog(this, "Minimum deposit amount not met for Current Account and Overdrafts value must be at least 300 for Current Account", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        if (accountType.equals("Current Account")) {
            insertIntoCurrentAccount(branchID, initialDeposit, overdrafts);
        } else if (accountType.equals("Savings Account")) {
            insertIntoSavingsAccount(branchID, initialDeposit);
        }
        this.dispose();
        // Mở cửa sổ đăng ký Customer
        new account(username).setVisible(true);
    }//GEN-LAST:event_createBtnActionPerformed

    private void depositFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_depositFieldActionPerformed

    private void branchIDComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchIDComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_branchIDComboBoxActionPerformed
    public void insertIntoSavingsAccount(String customerID, double initialDeposit) {
        try {
            // Use a PreparedStatement to perform the insert into savings_account
            String savingsInsertQuery = "INSERT INTO savings_account (account_number, balance, branch_id, interest_rate) VALUES (?,?, ?, ?)";
            PreparedStatement savingsSt = con.prepareStatement(savingsInsertQuery);
            savingsSt.setString(1, username);
            savingsSt.setDouble(2, initialDeposit);
            savingsSt.setString(3, branchIDComboBox.getSelectedItem().toString());
            savingsSt.setDouble(4, 7.5); // Set interest rate to 7.5

            // Execute the insert
            int rowsInserted = savingsSt.executeUpdate();

            // Check if the insert was successful
            if (rowsInserted > 0) {
                System.out.println("Data inserted into savings_account table");
            } else {
                System.out.println("Failed to insert data into savings_account table");
            }
        } catch (SQLException ex) {
            Logger.getLogger(newAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void insertIntoCurrentAccount(String customerID, double initialDeposit, double overdrafts) {
        try {
            // Use a PreparedStatement to perform the insert into current_account
            String currentInsertQuery = "INSERT INTO current_account (account_number, balance, branch_id, overdrafts) VALUES (?, ?, ?, ?)";
            PreparedStatement currentSt = con.prepareStatement(currentInsertQuery);
            currentSt.setString(1, username);
            currentSt.setDouble(2, initialDeposit);
            currentSt.setString(3, branchIDComboBox.getSelectedItem().toString());
            currentSt.setDouble(4, overdrafts);

            // Execute the insert
            int rowsInserted = currentSt.executeUpdate();

            // Check if the insert was successful
            if (rowsInserted > 0) {
                System.out.println("Data inserted into current_account table");
            } else {
                System.out.println("Failed to insert data into current_account table");
            }
        } catch (SQLException ex) {
            Logger.getLogger(newAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accountTypeComboBox;
    private javax.swing.JLabel branchCityLabel;
    private javax.swing.JComboBox<String> branchIDComboBox;
    private javax.swing.JButton createBtn;
    private javax.swing.JTextField depositField;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField overdraftField;
    // End of variables declaration//GEN-END:variables
}
